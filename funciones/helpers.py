import questionary


def seleccionar_producto_por_nombre(stock, accion="ver"):
    """
    Permite al usuario seleccionar un producto del stock mediante b√∫squeda por nombre (coincidencia parcial).

    Si se encuentran m√∫ltiples coincidencias, se muestra un men√∫ interactivo para elegir. Si solo hay una coincidencia, se selecciona autom√°ticamente.

    Args:
        stock (dict): Diccionario que contiene los productos actuales.
        accion (str): Texto para personalizar el mensaje al usuario (por defecto: "ver").

    Retorna:
        str or None: Clave del producto seleccionado, o None si no se encuentra, se cancela o el inventario est√° vac√≠o.

    Excepciones:
        No lanza excepciones expl√≠citas.
    """
    #Si no hay productos, se informa y sale
    if not stock:
        print("\nüì¶ El inventario est√° vac√≠o.")
        return None
    #Se pide al usuario que ingrese el nombre del producto
    termino = questionary.text(f"üîç ¬øQu√© producto quer√©s {accion}? (nombre)").ask()
    termino = termino.lower()
    #Se filtran los productos que contienen el t√©rmino buscado
    coincidencias = {
        clave: datos for clave, datos in stock.items()
        if termino in datos["nombre"].lower()
    }
    #Si no hay coincidencias, se informa y sale
    if not coincidencias:
        print("‚ùå No se encontraron productos.")
        return None
    #Si hay solo una coincidencia, la devuelve autom√°ticamente
    if len(coincidencias) == 1:
        return next(iter(coincidencias))
    #Si hay varias, se muestra una lista para que el usuario elija
    seleccion = questionary.select(
        f"Varios productos coinciden. Eleg√≠ uno para {accion}:",
        choices=list(coincidencias.keys()) + ["Cancelar"]
    ).ask()

    return None if seleccion == "Cancelar" else seleccion


def formatear_fecha(fecha_str):
    """
    Da formato legible a una fecha ingresada como cadena de 8 d√≠gitos.
    Si la fecha est√° en formato 'DDMMAAAA' (por ejemplo, '14072025'),
    la convierte a formato 'DD/MM/AAAA'. Si no cumple el formato esperado,
    la devuelve tal como fue ingresada.

    Args:
        fecha_str (str): Cadena que representa una fecha, idealmente de 8 d√≠gitos.

    Returns:
        str: Fecha formateada como 'DD/MM/AAAA' o el valor original si no es v√°lida.

    Raises:
        TypeError: Si el argumento no es una cadena.

    """
    #Se verifica que el dato sea texto
    if not isinstance(fecha_str, str):
        raise TypeError("La fecha debe ser una cadena de texto.")
    #Si tiene 8 d√≠gitos num√©ricos, se formatea como DD/MM/AAAA
    if len(fecha_str) == 8 and fecha_str.isdigit():
        return f"{fecha_str[:2]}/{fecha_str[2:4]}/{fecha_str[4:]}"
    #Si no cumple con el formato esperado, devuelve valor original.
    return fecha_str


